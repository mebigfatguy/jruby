---
:setup:
  :file:
    shims.rb: |
              #require 'minitest'
              # mock load_plugins as it loads rubygems
              #def Minitest.load_plugins
              #end

              require 'active_support'
              require 'active_support/testing/isolation'

              module ActiveSupport
                module Testing
                  module Isolation

                    def run
                      with_info_handler do
                        time_it do
                          capture_exceptions do
                            before_setup; setup; after_setup

                            skip 'isolation not supported'
                          end

                          %w{ before_teardown teardown after_teardown }.each do |hook|
                            capture_exceptions do
                              self.send hook
                            end
                          end
                        end
                      end

                      return self # per contract
                    end
                  end
                end
              end

              require 'bcrypt'

              module BCrypt
                class Engine
                  def self.hash_secret(secret, salt, _ = nil)
                    if valid_secret?(secret)
                      if valid_salt?(salt)
                        Truffle::Gem::BCrypt.hashpw(secret.to_s, salt.to_s)
                      else
                        raise Errors::InvalidSalt.new("invalid salt")
                      end
                    else
                      raise Errors::InvalidSecret.new("invalid secret")
                    end
                  end

                  def self.generate_salt(cost = self.cost)
                    cost = cost.to_i
                    if cost > 0
                      if cost < MIN_COST
                        cost = MIN_COST
                      end
                      Truffle::Gem::BCrypt.gensalt(cost)
                    else
                      raise Errors::InvalidCost.new("cost must be numeric and > 0")
                    end
                  end
                end
              end

    java.rb: nil
    bcrypt_ext.rb: nil
    bundler.rb: "module Bundler; def self.setup; end; end"

  # do not let bundler to install db gem group
  :without:
    - db
  :before:
    # temporary workaround, rake 10.4.2 will not install
    - ruby -e 'File.write "../Gemfile.lock", File.read("../Gemfile.lock").gsub(/rake \(10\.4\.2\)/,"rake (11.1.2)")'
:run:
  :require:
    - rubygems
    - shims
    - openssl-stubs
  :environment:
    N: 1
